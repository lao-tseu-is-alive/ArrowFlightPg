// Package db provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package db

const (
	JWTAuthScopes = "JWTAuth.Scopes"
)

// Defines values for TableTableType.
const (
	TableTableTypeM TableTableType = "m"
	TableTableTypeR TableTableType = "r"
	TableTableTypeT TableTableType = "t"
	TableTableTypeV TableTableType = "v"
)

// Defines values for TableTableTypeName.
const (
	TableTableTypeNameMaterializedView TableTableTypeName = "materialized view"
	TableTableTypeNameTOASTTable       TableTableTypeName = "TOAST table"
	TableTableTypeNameTable            TableTableTypeName = "table"
	TableTableTypeNameView             TableTableTypeName = "view"
)

// Defines values for TableListTableType.
const (
	TableListTableTypeM TableListTableType = "m"
	TableListTableTypeR TableListTableType = "r"
	TableListTableTypeT TableListTableType = "t"
	TableListTableTypeV TableListTableType = "v"
)

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Table defines model for Table.
type Table struct {
	Columns *[]struct {
		// DataType Data type of the column
		DataType string `json:"data_type"`

		// IsNullable Whether the column is nullable
		IsNullable bool `json:"is_nullable"`

		// Name Name of the column
		Name string `json:"name"`
	} `json:"columns,omitempty"`
	ForeignKeys *[]struct {
		// Column Name of the foreign key column
		Column     *string `json:"column,omitempty"`
		References *struct {
			// Column Referenced column name
			Column string `json:"column"`

			// Schema Schema name of the referenced table
			Schema string `json:"schema"`

			// Table Referenced table name
			Table string `json:"table"`
		} `json:"references,omitempty"`
	} `json:"foreign_keys,omitempty"`

	// Indexes List of indexes associated with the table
	Indexes *[]string `json:"indexes,omitempty"`

	// PrimaryKey List of columns that form the primary key
	PrimaryKey *[]string `json:"primary_key,omitempty"`

	// RowCount Number of rows in the table
	RowCount *float32 `json:"row_count,omitempty"`

	// SchemaName Name of the schema containing the table
	SchemaName string `json:"schema_name"`

	// SizeBytes Total size of the table in bytes
	SizeBytes *float32 `json:"size_bytes,omitempty"`

	// TableComment Comment associated with the table (if any)
	TableComment *string `json:"table_comment"`

	// TableId Unique identifier for the table (OID)
	TableId int `json:"table_id"`

	// TableName Name of the table
	TableName string `json:"table_name"`

	// TableType Internal type of the table (r = regular table, v = view, t = TOAST table, m = materialized view)
	TableType *TableTableType `json:"table_type,omitempty"`

	// TableTypeName Human-readable type of the table
	TableTypeName *TableTableTypeName `json:"table_type_name,omitempty"`
}

// TableTableType Internal type of the table (r = regular table, v = view, t = TOAST table, m = materialized view)
type TableTableType string

// TableTableTypeName Human-readable type of the table
type TableTableTypeName string

// TableList defines model for TableList.
type TableList struct {
	SchemaName string `json:"schema_name"`
	TableId    int    `json:"table_id"`
	TableName  string `json:"table_name"`

	// TableType Internal type of the table (r = regular table, v = view, t = TOAST table, m = materialized view)
	TableType TableListTableType `json:"table_type"`
}

// TableListTableType Internal type of the table (r = regular table, v = view, t = TOAST table, m = materialized view)
type TableListTableType string

// CountParams defines parameters for Count.
type CountParams struct {
	// SchemaName schema_name to filter by the tables to return
	SchemaName *string `form:"schema_name,omitempty" json:"schema_name,omitempty"`
}

// ListParams defines parameters for List.
type ListParams struct {
	// SchemaName schema_name to filter by the tables to return
	SchemaName *string `form:"schema_name,omitempty" json:"schema_name,omitempty"`
}
