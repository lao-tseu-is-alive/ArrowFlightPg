// Package db provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package db

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List returns a list of db schemas
	// (GET /schemas)
	ListSchemas(ctx echo.Context) error
	// Count returns the number of table based on search criterias
	// (GET /table/count)
	Count(ctx echo.Context, params CountParams) error
	// Get will retrieve in backend all information about a specific tableId
	// (GET /table/{tableId})
	Get(ctx echo.Context, tableId int) error
	// List returns a list of db tables
	// (GET /tables)
	List(ctx echo.Context, params ListParams) error
	// List returns a geoJson of tables found
	// (GET /tables/geojson)
	GeoJson(ctx echo.Context, params GeoJsonParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListSchemas converts echo context to params.
func (w *ServerInterfaceWrapper) ListSchemas(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListSchemas(ctx)
	return err
}

// Count converts echo context to params.
func (w *ServerInterfaceWrapper) Count(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CountParams
	// ------------- Optional query parameter "schema_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "schema_name", ctx.QueryParams(), &params.SchemaName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter schema_name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Count(ctx, params)
	return err
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tableId" -------------
	var tableId int

	err = runtime.BindStyledParameterWithOptions("simple", "tableId", ctx.Param("tableId"), &tableId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tableId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get(ctx, tableId)
	return err
}

// List converts echo context to params.
func (w *ServerInterfaceWrapper) List(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListParams
	// ------------- Optional query parameter "schema_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "schema_name", ctx.QueryParams(), &params.SchemaName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter schema_name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.List(ctx, params)
	return err
}

// GeoJson converts echo context to params.
func (w *ServerInterfaceWrapper) GeoJson(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GeoJsonParams
	// ------------- Optional query parameter "schema_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "schema_name", ctx.QueryParams(), &params.SchemaName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter schema_name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GeoJson(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/schemas", wrapper.ListSchemas)
	router.GET(baseURL+"/table/count", wrapper.Count)
	router.GET(baseURL+"/table/:tableId", wrapper.Get)
	router.GET(baseURL+"/tables", wrapper.List)
	router.GET(baseURL+"/tables/geojson", wrapper.GeoJson)

}
